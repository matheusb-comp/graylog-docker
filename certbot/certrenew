#!/bin/sh

SCRIPT_NAME=$(basename "$0")
usage () {
  printf "%s\n\n" "Usage: $SCRIPT_NAME [OPTIONS]"
  printf "%s\n\nOptions:\n" "Use the Certbot docker image to renew all \
certificates previously obtained that are near expiry (by default using the \
'webroot' plugin)."
  echo "  -h, --help         Show this message and exit"
  echo "  -p, --path         Relative path where the Let's Encrypt folder is \
located (Default: ./cert-data)"
  echo "  -w, --webroot      Use the 'webroot' plugin with this folder \
(inside the location defined in the path option) for the ACME challenge \
(Default: ./cert-data/acme-webroot)"
  echo "  -z, --standalone   Use the 'standalone' plugin (must bind to port 80)"
  echo "  -s, --staging      Use the staging server to obtain test (invalid) \
certificates"
  echo "  -t, --testing      Execute a 'dry-run' test without downloading \
certificates"
  echo "  -f, --force        Force the renew attempt of all certificates"
  printf "\n%s\n" "Docker must be installed and, if using the 'standalone' \
option, the well known HTTP port (80) must not be in use.
Other options may be supplied to the Certbot image after two dashes ('--').
For example, to skip the random sleep time before running the certificate \
renewal:
  $SCRIPT_NAME -s -t -- --no-random-sleep-on-renew"
  exit 0
}

# Process received parameters with getopt (available in BusyBox)
# https://busybox.net/downloads/BusyBox.html#getopt
O=$(getopt \
  -l path: \
  -l webroot:: \
  -l force \
  -l staging \
  -l testing \
  -l standalone \
  -l help \
  -- p:w::fstzh "$@" \
) || exit 1
eval set -- "$O"
while true; do
  case "$1" in
  -p|--path) DATA_PATH="$2"; shift 2;;
  -w|--webroot) WEBROOT="$2"; shift 2;;
  -f|--force) FORCE="--force-renewal"; shift;;
  -s|--staging) STAGING="--staging"; shift;;
  -t|--testing) TESTING="--dry-run"; shift;;
  -z|--standalone) PLUGIN="--standalone"; shift;;
  -h|--help) usage; shift;;
  --) shift; break;;
  *) echo "## Error." >&2; exit 1;;
  esac
done

# Check if docker is installed
if [ ! -x "$(command -v docker)" ]; then
  echo "## Error: Docker is not installed." >&2
  exit 1
fi

# Apply the default to DATA_PATH
cd $(dirname "$0")
DATA_PATH=${DATA_PATH:-"$(pwd)/cert-data"}
CONF_CERTBOT="${DATA_PATH}/letsencrypt"
cd - > /dev/null 2>&1

# Setup the Certbot plugin (webroot or standalone)
if [ -z "$PLUGIN" ]; then
  PLUGIN="--webroot -w /acme-webroot"
  WEBROOT_PATH="${DATA_PATH}/${WEBROOT:-acme-webroot}"
  WEBROOT_VOLUME="-v ${WEBROOT_PATH}:/acme-webroot"

  # Create the webroot folder if it doesn't exist
  mkdir -p "$WEBROOT_PATH"
else
  # Certbot's standalone server needs to be bound to port 80
  nc -z 127.0.0.1 80
  if [ $? -eq 0 ]; then
    echo "## Error: Port 80 in use." >&2
    exit 1
  fi
  PORT="-p 80:80"
fi

# Check if the 'letsencrypt/renewal' folder exists inside DATA_PATH
if [ ! -d "${CONF_CERTBOT}/renewal" ]; then
  echo "## Error: Let's Encrypt 'renewal' folder not found." >&2
  exit 1
fi

# Execute the certbot webroot renewal
echo "## Renewing Let's Encrypt certificates"
docker run --rm $PORT $WEBROOT_VOLUME \
  -v "${CONF_CERTBOT}:/etc/letsencrypt" \
  --entrypoint "certbot" \
  certbot/certbot renew $PLUGIN \
    --logs-dir "/etc/letsencrypt/logs" \
    $TESTING $STAGING $FORCE $@
